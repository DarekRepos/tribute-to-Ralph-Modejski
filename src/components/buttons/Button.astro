---
const { href, unelevated, outlined, customIcon, onPrimary, newTab } =
  Astro.props;

const Tag = href ? "a" : "button";
---

<Tag
  class={`btn ${unelevated && `btn--unelevated`} ${
    outlined && `btn--outlined`
  } ${onPrimary && `btn--on-primary`}`}
  href={href}
  target={`${newTab ? "_blank" : ``}`}
  rel={`${newTab ? "noopener noreferrer" : ``}`}
>
  <slot />
  {
    customIcon && (
      <span class="custom-icon__span">
        <slot name="icon">custom_icon</slot>
      </span>
    )
  }
</Tag>

<style lang="scss">
  $stone-700: rgb(68, 64, 60);
  $stone-500: rgb(120, 113, 108);
  .btn {
    background-color: transparent;
    color: $stone-700;
    font-weight: bold; /* equivalent to font-semibold */
    padding: 0.5em 1em; /* 0.5 times the font size of the parent element for padding */
    border: 0.1em solid $stone-500; /* 0.1 times the font size of the parent element for border width */
    border-radius: 0.5em; /* 0.5 times the font size of the parent element for border radius */
    cursor: pointer; /* Assuming you want hover effect */
    text-transform: uppercase;

    &:hover {
      background-color: $stone-500;
      color: white;
      border-color: transparent;
    }
  }

  .btn--unelevated {
    background-color: transparent;
    color: var(--theme-on-bg);
  }
  .btn--unelevated:hover {
    background-color: transparent;
    opacity: var(--theme-primary-hover);
  }
  .btn--outlined {
    color: var(--theme-primary);
    background-color: transparent;
    border: 2px solid var(--theme-primary);
    transition: background-color var(--theme-transition);
  }
  .btn--outlined:hover {
    background-color: var(--theme-primary);
    color: var(--theme-on-primary);
  }
  .custom-icon__span {
    margin-left: 0.25rem;
    display: flex;
    align-items: center;
  }

  .custom-icon__span :global(svg) {
    width: 24px;
    height: 24px;
  }

  a.btn {
    text-decoration: none;
  }
  button.btn {
    cursor: pointer;
    outline: none;
  }
</style>
